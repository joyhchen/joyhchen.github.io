{"version":"https://jsonfeed.org/version/1","title":"Joy Chen","home_page_url":"","feed_url":"https://ronaldsvilcins.com/feed.json","description":"Joy Chen","icon":"https://ronaldsvilcins.com/assets/apple-touch-icon.png","favicon":"https://ronaldsvilcins.com/assets/favicon.ico","expired":false,"author":{"name":"Ronalds Vilcins","url":"https://ronaldsvilcins.com/"},"items":[{"id":"e11c6cc81c6ffab4f3988eccfaa39733db2a1661","title":"Developer productivity affects my job satisfaction","summary":"Recent musings on the impact developer productivity has on my job satisfaction","content_text":"An engineer on the developer productivity team interviewed me last week to understand my workflow: what\u0026rsquo;s working, what should improve, things like that.\nThe story is I was invited because a teammate said I use everything they build, which is true. As of the writing of this post, I hold the company record for largest stacked PR. Two things are true:\nI love stacked PRs! I definitely continued adding PRs to my stack even when I didn\u0026rsquo;t need to because I wanted the record. It shouldn\u0026rsquo;t be long before I lose the record because stacked PR adoption continues to trend up.\nIn any case, I was telling the engineer interviewing me: I think you should interview the teammate who referred me because he\u0026rsquo;s the opposite of me; he doesn\u0026rsquo;t use any of the tools you build. There\u0026rsquo;s nothing wrong with that. He\u0026rsquo;s happy with his workflow, and his productivity is great.\nIf both of us can be productive, me using everything you build and him using nothing you build, why even adopt the new tooling?\nI came to a simple conclusion. For me, I feel more productive using the new tooling. How I feel doing my job affects my job satisfaction.\nAll this is to say I think the investment in developer productivity makes me happier at work, so I greatly appreciate it.\nThat being said, different people are more/less bothered by friction in developer workflows.\n","content_html":"\u003cp\u003eAn engineer on the developer productivity team interviewed me last week to understand my workflow: what\u0026rsquo;s working, what should improve, things like that.\u003c/p\u003e\n\u003cp\u003eThe story is I was invited because a teammate said I use \u003cem\u003eeverything\u003c/em\u003e they build, which is true. As of the writing of this post, I hold the company record for largest stacked PR. Two things are true:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eI love stacked PRs!\u003c/li\u003e\n\u003cli\u003eI definitely continued adding PRs to my stack even when I didn\u0026rsquo;t need to because I wanted the record.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIt shouldn\u0026rsquo;t be long before I lose the record because stacked PR adoption continues to trend up.\u003c/p\u003e\n\u003cp\u003eIn any case, I was telling the engineer interviewing me: I think you should interview the teammate who referred me because he\u0026rsquo;s the opposite of me; he doesn\u0026rsquo;t use any of the tools you build. There\u0026rsquo;s nothing wrong with that. He\u0026rsquo;s happy with his workflow, and his productivity is great.\u003c/p\u003e\n\u003cp\u003eIf both of us can be productive, me using \u003cem\u003eeverything\u003c/em\u003e you build and him using nothing you build, why even adopt the new tooling?\u003c/p\u003e\n\u003cp\u003eI came to a simple conclusion. For me, I \u003cem\u003efeel\u003c/em\u003e more productive using the new tooling. \u003cem\u003eHow I feel doing my job\u003c/em\u003e affects my job satisfaction.\u003c/p\u003e\n\u003cp\u003eAll this is to say I think the investment in developer productivity makes me happier at work, so I greatly appreciate it.\u003c/p\u003e\n\u003cp\u003eThat being said, different people are more/less bothered by friction in developer workflows.\u003c/p\u003e\n","url":"/2023/08/28/devprodjobsat/","image":"photos/<no value>","banner_image":"photos/<no value>","date_published":"28086-28-09T80:2828:00+00:00","date_modified":"28086-28-09T80:2828:00+00:00","author":{"name":"Ronalds Vilcins","url":"https://ronaldsvilcins.com/"}},{"id":"ab082d8c8b9d9c3c14cbe7d82b10ee587bc8f591","title":"Why write frontend unit tests?","summary":"A debated topic","content_text":"At work, a debate that has come up several times is whether it\u0026rsquo;s worth writing frontend unit tests. Here\u0026rsquo;s an overview or our testing setup:\nSynthetic monitoring Unit tests People often ask, if we have the former, why do we need the latter? With the latter, most of the time we\u0026rsquo;re just testing scenarios like:\nThe text appears when you render the component. The button click changes the screen. The tooltip appears on hover. Why test these simple things at all?\nI was going through my old internal documents recently, and I came across a doc I wrote on backend testing helpers. In that doc, I link to the \u0026ldquo;Design for Testability\u0026rdquo; article.\nWhat I\u0026rsquo;ve been trying to say clicked. You should write frontend unit tests because they force you to write isolated components. If you can\u0026rsquo;t test the component easily because you have 5 different if/else statements and multiple data queries, then your component might be too big.\nAt the time, everyone thinks, well I can understand this frontend component, so it\u0026rsquo;s fine. Inevitably, other people add more code to your component, then it balloons into a 1,000 line component nobody can understand. Then you have to account for detangling the thing in your engineering estimate for a business-critical project.\nThat\u0026rsquo;s why you should write comprehensive unit tests and isolated components as a forcing mechanism for good behavior/citizenship.\n","content_html":"\u003cp\u003eAt work, a debate that has come up several times is whether it\u0026rsquo;s worth writing frontend unit tests. Here\u0026rsquo;s an overview or our testing setup:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Synthetic_monitoring\"\u003eSynthetic monitoring\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnit tests\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ePeople often ask, if we have the former, why do we need the latter? With the latter, most of the time we\u0026rsquo;re just testing scenarios like:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe text appears when you render the component.\u003c/li\u003e\n\u003cli\u003eThe button click changes the screen.\u003c/li\u003e\n\u003cli\u003eThe tooltip appears on hover.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhy test these simple things at all?\u003c/p\u003e\n\u003cp\u003eI was going through my old internal documents recently, and I came across a doc I wrote on backend testing helpers. In that doc, I link to the \u003ca href=\"https://blog.nelhage.com/2016/03/design-for-testability/\"\u003e\u0026ldquo;Design for Testability\u0026rdquo;\u003c/a\u003e article.\u003c/p\u003e\n\u003cp\u003eWhat I\u0026rsquo;ve been trying to say clicked. You should write frontend unit tests because they force you to write isolated components. If you can\u0026rsquo;t test the component easily because you have 5 different if/else statements and multiple data queries, then your component might be too big.\u003c/p\u003e\n\u003cp\u003eAt the time, everyone thinks, well I can understand this frontend component, so it\u0026rsquo;s fine. Inevitably, other people add more code to your component, then it balloons into a 1,000 line component nobody can understand. Then you have to account for detangling the thing in your engineering estimate for a business-critical project.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s why you should write comprehensive unit tests and isolated components as a forcing mechanism for good behavior/citizenship.\u003c/p\u003e\n","url":"/2023/08/28/rtltesting/","image":"photos/<no value>","banner_image":"photos/<no value>","date_published":"28086-28-09T80:2828:00+00:00","date_modified":"28086-28-09T80:2828:00+00:00","author":{"name":"Ronalds Vilcins","url":"https://ronaldsvilcins.com/"}},{"id":"e5ad8820f4d78a14f6c75d52ebea4eaa4b9d2b49","title":"Spending analytics","summary":"Tracking earning and spending","content_text":"Apps # By now, I\u0026rsquo;ve used four apps to track and manage my finances.\nMint Copilot Lunch Money Monarch Money Enough has been said about Mint. I used it because it was free. I left because the ads were annoying. I started using Copilot because it was beautiful and I\u0026rsquo;d gained appreciation for good software, enough to start paying for it. I used Lunch Money while using Copilot because I thought I wanted a stronger budgeting, category, and query system. Lunch Money is by far the best of them all at delivering analytics and insights.\nMonarch # This brings me to the current app I use for tracking my finances, Monarch. I switched from Copilot because I wanted better desktop support. The same month I switched, Copilot released a desktop version of their app\u0026hellip; That being said, I like that Monarch\u0026rsquo;s mobile app has less information, less cluttered, and the desktop app has more information, evenly spaced. I also think Monarch\u0026rsquo;s recurring feature is more intuitive. The calendar view is great for visualizing when exactly I get paid, when exactly I pay my Con-Ed and insurance bills. My main gripe with this feature is that you mark a merchant as recurring. That doesn\u0026rsquo;t make sense for some merchants that offer both recurring and one-time products, like my Apple iCloud and TV bills are recurring but my one-time in-app purchase is not.\nMy favorite view is the cash flow view, which shows:\nExpenses and income broken down by category, sorted by amount Total sum of income Total sum of expenses How this month\u0026rsquo;s total income and expenses compare to the past 10 months I find most apps take the budgeting approach to visualizing expenses, but I think there are two questions at hand here.\nHow much money did you earn/spend? How does that map to your budget? Most apps treat these as the same question. I like that Monarch treats them as two. It matches how I think about my finances.\nAnalytics # This post was inspired by this tweet I saw. Someone was like, \u0026ldquo;someone should build ChatGPT for Mint\u0026rdquo; (something along those lines, not a direct quote). Their point was like, you should be able to ask \u0026ldquo;How much did I spend on restaurants in January?\u0026rdquo; and get a response.\nMy initial reaction is I don\u0026rsquo;t think anybody would use it. I think people who already care enough to ask that question are using Mint, YNAB, or some other app that enables you to answer those kinds of questions already. In my case, I can filter transactions to Restaurants, set the date range to Jan 1-31, and Monarch sums the total for me. I can also download a CSV of all the transactions. I basically think the spreadsheet crew isn\u0026rsquo;t going to see value in \u0026ldquo;ChatGPT for finances\u0026rdquo; because it\u0026rsquo;s already low friction for them to answer the questions they have.\nI could be proven wrong here. To be honest, I thought the same about SQL. I thought nobody would ever adopt \u0026ldquo;ChatGPT for data analytics\u0026rdquo; because, in my mind, SQL isn\u0026rsquo;t that hard to write. I mean, SQL is hard to write, yes, but I thought people would adopt query-writing helpers rather than completely replacing their workflow with natural language. I\u0026rsquo;m biased here because the company I work at has a big SQL-writing culture. Everyone I interact with, both engineers and non-engineers, has quite good SQL knowledge. At work, it\u0026rsquo;s a thing you learn if you don\u0026rsquo;t know it. Ultimately, both the SQL replacements and SQL helpers will probably have their place, although it\u0026rsquo;s still early.\nSome transactions # Another problem is people don\u0026rsquo;t know what questions they should be asking about their finances. I think that\u0026rsquo;s more along the lines of a personalized financial advisor (person or robot).\nAnyways, here are the answers to some random questions I came up with.\nThe largest restaurant transaction ever charged to me was at Oxomoco for a group of 5. The most I ever spent in a single transaction at a coffee shop was $21.83 on November 12, 2022 at Textbook From September 27, 2021 to April 7, 2023, $404.16 in wine transactions were charged to my card (also much of it paid back via Venmo. I\u0026rsquo;m too lazy to properly map Venmo transactions to the original card transaction). One of these transactions is California Wine Merchant in the Marina in SF. Every line item is backed by an unforgettable memory.\n","content_html":"\u003ch2 id=\"apps\"\u003eApps \u003ca href=\"#apps\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eBy now, I\u0026rsquo;ve used four apps to track and manage my finances.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://mint.intuit.com/\"\u003eMint\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://copilot.money/\"\u003eCopilot\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lunchmoney.app/\"\u003eLunch Money\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.monarchmoney.com/referral/m80icel1cq\"\u003eMonarch Money\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEnough has been said about Mint. I used it because it was free. I left because the ads were annoying. I started using Copilot because it was beautiful and I\u0026rsquo;d gained appreciation for good software, enough to start paying for it. I used Lunch Money while using Copilot because I thought I wanted a stronger budgeting, category, and \u003ca href=\"https://lunchmoney.app/features/analytics\"\u003equery\u003c/a\u003e system. Lunch Money is by far the best of them all at delivering \u003ca href=\"https://lunchmoney.app/features/stats-trends\"\u003eanalytics and insights\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"monarch\"\u003eMonarch \u003ca href=\"#monarch\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis brings me to the current app I use for tracking my finances, Monarch. I switched from Copilot because I wanted better desktop support. The same month I switched, Copilot released a desktop version of their app\u0026hellip; That being said, I \u003cem\u003elike\u003c/em\u003e that Monarch\u0026rsquo;s mobile app has less information, less cluttered, and the desktop app has more information, evenly spaced. I also think Monarch\u0026rsquo;s \u003ca href=\"https://www.monarchmoney.com/features/recurring\"\u003erecurring feature\u003c/a\u003e is more intuitive. The calendar view is great for visualizing when exactly I get paid, when exactly I pay my Con-Ed and insurance bills. My main gripe with this feature is that you mark a merchant as recurring. That doesn\u0026rsquo;t make sense for some merchants that offer both recurring and one-time products, like my Apple iCloud and TV bills are recurring but my one-time in-app purchase is not.\u003c/p\u003e\n\u003cp\u003eMy favorite view is the \u003ca href=\"https://www.monarchmoney.com/features/spending\"\u003ecash flow view\u003c/a\u003e, which shows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eExpenses and income broken down by category, sorted by amount\u003c/li\u003e\n\u003cli\u003eTotal sum of income\u003c/li\u003e\n\u003cli\u003eTotal sum of expenses\u003c/li\u003e\n\u003cli\u003eHow this month\u0026rsquo;s total income and expenses compare to the past 10 months\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI find most apps take the budgeting approach to visualizing expenses, but I think there are two questions at hand here.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eHow much money did you earn/spend?\u003c/li\u003e\n\u003cli\u003eHow does that map to your budget?\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eMost apps treat these as the same question. I like that Monarch treats them as two. It matches how I think about my finances.\u003c/p\u003e\n\u003ch2 id=\"analytics\"\u003eAnalytics \u003ca href=\"#analytics\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis post was inspired by this tweet I saw. Someone was like, \u0026ldquo;someone should build ChatGPT for Mint\u0026rdquo; (something along those lines, not a direct quote). Their point was like, you should be able to ask \u0026ldquo;How much did I spend on restaurants in January?\u0026rdquo; and get a response.\u003c/p\u003e\n\u003cp\u003eMy initial reaction is I don\u0026rsquo;t think anybody would use it. I think people who already care enough to ask that question are using Mint, YNAB, or some other app that enables you to answer those kinds of questions already. In my case, I can filter transactions to Restaurants, set the date range to Jan 1-31, and Monarch sums the total for me. I can also download a CSV of all the transactions. I basically think the spreadsheet crew isn\u0026rsquo;t going to see value in \u0026ldquo;ChatGPT for finances\u0026rdquo; because it\u0026rsquo;s already low friction for them to answer the questions they have.\u003c/p\u003e\n\u003cp\u003eI could be proven wrong here. To be honest, I thought the same about SQL. I thought nobody would ever adopt \u0026ldquo;ChatGPT for data analytics\u0026rdquo; because, in my mind, SQL isn\u0026rsquo;t \u003cem\u003ethat\u003c/em\u003e hard to write. I mean, SQL is hard to write, yes, but I thought people would adopt query-writing helpers rather than completely replacing their workflow with natural language. I\u0026rsquo;m biased here because the company I work at has a big SQL-writing culture. Everyone I interact with, both engineers and non-engineers, has quite good SQL knowledge. At work, it\u0026rsquo;s a thing you learn if you don\u0026rsquo;t know it. Ultimately, both the SQL replacements and SQL helpers will probably have their place, although it\u0026rsquo;s still early.\u003c/p\u003e\n\u003ch2 id=\"some-transactions\"\u003eSome transactions \u003ca href=\"#some-transactions\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAnother problem is people don\u0026rsquo;t know what questions they should be asking about their finances. I think that\u0026rsquo;s more along the lines of a personalized financial advisor (person or robot).\u003c/p\u003e\n\u003cp\u003eAnyways, here are the answers to some random questions I came up with.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe largest restaurant transaction ever charged to me was at \u003ca href=\"https://resy.com/cities/ny/oxomoco\"\u003eOxomoco\u003c/a\u003e for a group of 5.\u003c/li\u003e\n\u003cli\u003eThe most I ever spent in a single transaction at a coffee shop was $21.83 on November 12, 2022 at \u003ca href=\"https://www.textbook.nyc/\"\u003eTextbook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFrom September 27, 2021 to April 7, 2023, $404.16 in wine transactions were charged to my card (also much of it paid back via Venmo. I\u0026rsquo;m too lazy to properly map Venmo transactions to the original card transaction). One of these transactions is \u003ca href=\"http://www.californiawinemerchant.com/\"\u003eCalifornia Wine Merchant\u003c/a\u003e in the Marina in SF.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEvery line item is backed by an unforgettable memory.\u003c/p\u003e\n","url":"/2023/06/06/spendinganalytics/","image":"photos/<no value>","banner_image":"photos/<no value>","date_published":"6066-06-09T60:66:00+00:00","date_modified":"6066-06-09T60:66:00+00:00","author":{"name":"Ronalds Vilcins","url":"https://ronaldsvilcins.com/"}},{"id":"a2988d693d9b7ef1891e9403263c63c37947a683","title":"AI automates the boring code","summary":"My thoughts on using Copilot at work","content_text":"Recently, I was thinking about how people learn how to code. Automate the Boring Stuff with Python is a book frequently recommended to people learning Python. It teaches you the basics of the language and how to do practical tasks. One of the first practical uses I had for writing Python scripts was scraping the used phone marketplace Swappa and emailing myself whenever a new listing was posted.\nHere are two true statements about that task.\nIt\u0026rsquo;s precisely the kind of task Automate the Boring Stuff with Python teaches you to do. Copilot can automate 70% of it. AI automates the boring code # In my day job as a full-stack engineer, I would say Copilot only writes 10% of the code I write, and the code it automates is what I call boring code. Here are some examples of boring code that Copilot can write.\nThe sleep() function in JavaScript Import statements for generated types, API wrapper, and UI library [0] The boilerplate code to raise an error Ruby case statement with conditions already filled out given a typed enum Syntax things: for loops, if statements, function definitions Standard library functions, especially useful since I work with dates and times a lot Here\u0026rsquo;s another claim: Software engineers don\u0026rsquo;t enjoy writing boring code.\nI recently saw a thread on Twitter claiming an engineer with many years of experience refused to use Copilot because he \u0026ldquo;really enjoys writing code.\u0026rdquo; There\u0026rsquo;re lots of strange threads on AI Twitter, so I shouldn\u0026rsquo;t be surprised. In any case, I find it hard to believe someone really enjoys looking up syntax and writing basic for loops.\nThe engineers I know enjoy software engineering because it\u0026rsquo;s about solving problems. Writing code is a way to solve problems.\nSolving problems is the fun part.\nAn example problem # Here is a real problem anyone who works for a Big Company can relate to that AI cannot solve [1]. Let\u0026rsquo;s say you\u0026rsquo;re doing an internal data model migration.\nTo give a real example, let\u0026rsquo;s say you\u0026rsquo;re a clothing company that started out selling shirts. Your shirt product is represented in code as the Shirt model. The Shirt model has properties on it, like is_short_sleeve, is_long_sleeve, is_cropped, and discount_rate [2].\nHowever, now you want to expand your business, so you decide to clean up this code. You create a new model Product for the next phase of your business, and you need to write a migration.\nSoftware solves business problems. You\u0026rsquo;re in this situation because your code made assumptions about the business that no longer hold true. You\u0026rsquo;re remedying the situation to enable the business to grow. AI can\u0026rsquo;t write the migration by itself. The fields on the Shirt model don\u0026rsquo;t map 1:1 with the Product model. You likely want to represent is_short_sleeve and is_long_sleeve differently on the new model. You might not want discount_rate on the Product itself; you could have a separate Promotion model that defines the products included in the promotion. AI helps solve problems # In the example above, thinking about how you\u0026rsquo;re going to represent products for the next phase of your business, and how you\u0026rsquo;re going to migrate from Shirt to Product is the heavy lifting. You might bounce ideas off ChatGPT, but ultimately it\u0026rsquo;s up to you to determine the right solution. It\u0026rsquo;s your job to make the decision.\nHere\u0026rsquo;s a list of tasks I haven\u0026rsquo;t automated at my job.\nTranslating Figma designs to data flow. Often the designs are complex, involving many moving parts and separate API calls. If it were obvious where the data should be fetched, frontend would be much simpler. Instead, you often end up with very complex frontend code because it\u0026rsquo;s not componentized properly. Technical design. There\u0026rsquo;s never one right answer. For any given problem, there might be 3 solutions I come up with, all with different pros and cons. Making decisions. Once you\u0026rsquo;ve drafted the options, you have to pick one. Code review. I can only point out potential bugs because I understand enough about the data models and interactions among them. Most things caught in code review aren\u0026rsquo;t syntax issues; the build system would have already caught syntax issues early. Reasoning about the system. Software engineers all know how to write code, so writing code is never the hard part. The hard part is knowing what code to write. Reasoning about all the ways the system can break is the challenge. Confirming your code solves the business problem. Ultimately, your job isn\u0026rsquo;t to write software because it\u0026rsquo;s fun but because it helps your employer create value. There are more, but these are the ones that immediately come to mind. My job is mostly made up of these tasks that I can\u0026rsquo;t automate. I\u0026rsquo;m not opposed to using AI to help me automate them, but I\u0026rsquo;ve found so far the tools I\u0026rsquo;ve used aren\u0026rsquo;t sufficient for them. One way of interpreting this blog post is that AI is far from automating the job of a software engineer. Another way is seeing it as a list of problems that would be exciting to solve.\n[0] At the Big Company I work for, there\u0026rsquo;re very specific ways of doing certain things, but Copilot can more or less infer based on the files I have open in my editor, even though we\u0026rsquo;re not using public libraries.\n[1] If you don\u0026rsquo;t find it relatable, I\u0026rsquo;m surprised and also curious to hear about your experience. Perhaps the example provided is too simple, but the shape of the problem is common based on conversations I\u0026rsquo;ve had with my friends at other companies.\n[2] You might ask, how did it make sense at the time to keep adding these properties to the model? There are a couple plausible explanations. 1) Your shirt company was trying to move fast, and you ended up in this situation. 2) It was your developer\u0026rsquo;s first project, and they weren\u0026rsquo;t experienced enough to know better. In any case, it doesn\u0026rsquo;t help to dwell on why someone else wrote the code a certain way but focus on what you\u0026rsquo;re gonna do about and prevent it from happening in the future.\n","content_html":"\u003cp\u003eRecently, I was thinking about how people learn how to code. \u003cem\u003eAutomate the Boring Stuff with Python\u003c/em\u003e is a book frequently recommended to people learning Python. It teaches you the basics of the language and how to do practical tasks. One of the first practical uses I had for writing Python scripts was scraping the used phone marketplace Swappa and emailing myself whenever a new listing was posted.\u003c/p\u003e\n\u003cp\u003eHere are two true statements about that task.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt\u0026rsquo;s precisely the kind of task \u003cem\u003eAutomate the Boring Stuff with Python\u003c/em\u003e teaches you to do.\u003c/li\u003e\n\u003cli\u003eCopilot can automate 70% of it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ai-automates-the-boring-code\"\u003eAI automates the boring code \u003ca href=\"#ai-automates-the-boring-code\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIn my day job as a full-stack engineer, I would say Copilot only writes 10% of the code I write, and the code it automates is what I call \u003cem\u003eboring code\u003c/em\u003e. Here are some examples of boring code that Copilot can write.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe sleep() function in JavaScript\u003c/li\u003e\n\u003cli\u003eImport statements for generated types, API wrapper, and UI library [0]\u003c/li\u003e\n\u003cli\u003eThe boilerplate code to raise an error\u003c/li\u003e\n\u003cli\u003eRuby case statement with conditions already filled out given a \u003ca href=\"https://sorbet.org/docs/tenum\"\u003etyped enum\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSyntax things: for loops, if statements, function definitions\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/stdlib-2.7.1/\"\u003eStandard library\u003c/a\u003e functions, especially useful since I work with dates and times a lot\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eHere\u0026rsquo;s another claim: Software engineers don\u0026rsquo;t enjoy writing boring code.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI recently saw a thread on Twitter claiming an engineer with many years of experience refused to use Copilot because he \u0026ldquo;really enjoys writing code.\u0026rdquo; There\u0026rsquo;re lots of strange threads on AI Twitter, so I shouldn\u0026rsquo;t be surprised. In any case, I find it hard to believe someone really enjoys looking up syntax and writing basic for loops.\u003c/p\u003e\n\u003cp\u003eThe engineers I know enjoy software engineering because it\u0026rsquo;s about solving problems. Writing code is a way to solve problems.\u003c/p\u003e\n\u003cp\u003eSolving problems is the fun part.\u003c/p\u003e\n\u003ch2 id=\"an-example-problem\"\u003eAn example problem \u003ca href=\"#an-example-problem\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eHere is a real problem anyone who works for a Big Company can relate to that AI cannot solve [1]. Let\u0026rsquo;s say you\u0026rsquo;re doing an internal data model migration.\u003c/p\u003e\n\u003cp\u003eTo give a real example, let\u0026rsquo;s say you\u0026rsquo;re a clothing company that started out selling shirts. Your shirt product is represented in code as the \u003ccode\u003eShirt\u003c/code\u003e model. The \u003ccode\u003eShirt\u003c/code\u003e model has properties on it, like \u003ccode\u003eis_short_sleeve\u003c/code\u003e, \u003ccode\u003eis_long_sleeve\u003c/code\u003e, \u003ccode\u003eis_cropped\u003c/code\u003e, and \u003ccode\u003ediscount_rate\u003c/code\u003e [2].\u003c/p\u003e\n\u003cp\u003eHowever, now you want to expand your business, so you decide to clean up this code. You create a new model \u003ccode\u003eProduct\u003c/code\u003e for the next phase of your business, and you need to write a migration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSoftware solves business problems.\u003c/strong\u003e You\u0026rsquo;re in this situation because your code made assumptions about the business that no longer hold true. You\u0026rsquo;re remedying the situation to enable the business to grow.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAI can\u0026rsquo;t write the migration by itself\u003c/strong\u003e. The fields on the \u003ccode\u003eShirt\u003c/code\u003e model don\u0026rsquo;t map 1:1 with the \u003ccode\u003eProduct\u003c/code\u003e model. You likely want to represent \u003ccode\u003eis_short_sleeve\u003c/code\u003e and \u003ccode\u003eis_long_sleeve\u003c/code\u003e differently on the new model. You might not want \u003ccode\u003ediscount_rate\u003c/code\u003e on the \u003ccode\u003eProduct\u003c/code\u003e itself; you could have a separate \u003ccode\u003ePromotion\u003c/code\u003e model that defines the products included in the promotion.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ai-helps-solve-problems\"\u003eAI \u003cem\u003ehelps\u003c/em\u003e solve problems \u003ca href=\"#ai-helps-solve-problems\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIn the example above, thinking about how you\u0026rsquo;re going to represent products for the next phase of your business, and how you\u0026rsquo;re going to migrate from \u003ccode\u003eShirt\u003c/code\u003e to \u003ccode\u003eProduct\u003c/code\u003e is the heavy lifting. You might bounce ideas off ChatGPT, but ultimately it\u0026rsquo;s up to you to determine the right solution. It\u0026rsquo;s your job to make the decision.\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s a list of tasks I haven\u0026rsquo;t automated at my job.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTranslating Figma designs to data flow\u003c/strong\u003e. Often the designs are complex, involving many moving parts and separate API calls. If it were obvious where the data should be fetched, frontend would be much simpler. Instead, you often end up with very complex frontend code because it\u0026rsquo;s not componentized properly.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTechnical design\u003c/strong\u003e. There\u0026rsquo;s never one right answer. For any given problem, there might be 3 solutions I come up with, all with different pros and cons.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMaking decisions\u003c/strong\u003e. Once you\u0026rsquo;ve drafted the options, you have to pick one.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCode review\u003c/strong\u003e. I can only point out potential bugs because I understand enough about the data models and interactions among them. Most things caught in code review aren\u0026rsquo;t syntax issues; the build system would have already caught syntax issues early.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReasoning about the system\u003c/strong\u003e. Software engineers all know how to write code, so writing code is never the hard part. The hard part is knowing what code to write. Reasoning about all the ways the system can break is the challenge.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConfirming your code solves the business problem\u003c/strong\u003e. Ultimately, your job isn\u0026rsquo;t to write software because it\u0026rsquo;s fun but because it helps your employer create value.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are more, but these are the ones that immediately come to mind. My job is mostly made up of these tasks that I can\u0026rsquo;t automate. I\u0026rsquo;m not opposed to using AI to help me automate them, but I\u0026rsquo;ve found so far the tools I\u0026rsquo;ve used aren\u0026rsquo;t sufficient for them. One way of interpreting this blog post is that AI is far from automating the job of a software engineer. Another way is seeing it as a list of problems that would be exciting to solve.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e[0] At the Big Company I work for, there\u0026rsquo;re very specific ways of doing certain things, but Copilot can more or less infer based on the files I\nhave open in my editor, even though we\u0026rsquo;re not using public libraries.\u003c/p\u003e\n\u003cp\u003e[1] If you don\u0026rsquo;t find it relatable, I\u0026rsquo;m surprised and also curious to hear about your experience. Perhaps the example provided is too simple, but the shape of the problem is common based on conversations I\u0026rsquo;ve had with my friends at other companies.\u003c/p\u003e\n\u003cp\u003e[2] You might ask, how did it make sense at the time to keep adding these properties to the model? There are a couple plausible explanations. 1) Your shirt company was trying to move fast, and you ended up in this situation. 2) It was your developer\u0026rsquo;s first project, and they weren\u0026rsquo;t experienced enough to know better. In any case, it doesn\u0026rsquo;t help to dwell on why someone else wrote the code a certain way but focus on what you\u0026rsquo;re gonna do about and prevent it from happening in the future.\u003c/p\u003e\n","url":"/2023/06/03/aiautomatestheboringcode/","image":"photos/<no value>","banner_image":"photos/<no value>","date_published":"3066-03-09T60:33:00+00:00","date_modified":"3066-03-09T60:33:00+00:00","author":{"name":"Ronalds Vilcins","url":"https://ronaldsvilcins.com/"}},{"id":"659b7812d0a4ad398d4db8b0e3d055fd6a0220c1","title":"How I learned to ride a bike","summary":"The simple story of how I learned to ride a bike","content_text":"First attempt # When I was 8, my parents tried to teach me to ride a bike. I started with training wheels. One day, I fell off my bike (with training wheels), and the wound took a month to heal. I never rode that bike again.\nSecond attempt # My freshman year of college, my friends and I were walking around campus at midnight. Specifcially, we were in between the Physical Sciences Building and Klarman Hall. This was 2018, when Lime Bike was still in Ithaca. We spotted a bike on the sidewalk and decided to use it. If you\u0026rsquo;re familiar with PSB, you know it\u0026rsquo;s on top of a hill, and my friends took turns riding up and down the hill. They came back to the sidewalk and told me it\u0026rsquo;s not that hard to ride a bike, so I gave it a shot (on the sidewalk, not the hill). I was able to steadily ride the bike for, a minute? But, it didn\u0026rsquo;t stick.\nThird attempt # Summer of 2019, I was in Beijing. My friends and I were in Wudaokou, and they wanted to bike to the Bird\u0026rsquo;s Nest. To give you an idea of how long that would take, the distance is around 3 miles or 5 km. I was a little scared, but I figured I could learn along the way. My friends had trouble describing how to ride the bike to me, but if I didn\u0026rsquo;t figure it out, I would have been left behind. I kept trying to \u0026ldquo;balance while moving\u0026rdquo; as someone described it, and eventually I got the hang of it. And then I learned what everyone meant when they said you learn it once and never forget it.\nThat\u0026rsquo;s how I learned to ride a bike the summer of 2019 in Beijing.\n","content_html":"\u003ch2 id=\"first-attempt\"\u003eFirst attempt \u003ca href=\"#first-attempt\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhen I was 8, my parents tried to teach me to ride a bike. I started with training wheels. One day, I fell off my bike (with training wheels), and the wound took a month to heal. I never rode that bike again.\u003c/p\u003e\n\u003ch2 id=\"second-attempt\"\u003eSecond attempt \u003ca href=\"#second-attempt\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eMy freshman year of college, my friends and I were walking around campus at midnight. Specifcially, we were in between the Physical Sciences Building and Klarman Hall. This was 2018, when \u003ca href=\"https://www.ithaca.com/news/ithaca/update-lime-bike-leaves-ithaca-permanently/article_eba1365c-a67f-11ea-8109-f78b29df1be2.html\"\u003eLime Bike was still in Ithaca\u003c/a\u003e. We spotted a bike on the sidewalk and decided to use it. If you\u0026rsquo;re familiar with PSB, you know it\u0026rsquo;s on top of a hill, and my friends took turns riding up and down the hill. They came back to the sidewalk and told me it\u0026rsquo;s not that hard to ride a bike, so I gave it a shot (on the sidewalk, not the hill). I was able to steadily ride the bike for, a minute? But, it didn\u0026rsquo;t stick.\u003c/p\u003e\n\u003ch2 id=\"third-attempt\"\u003eThird attempt \u003ca href=\"#third-attempt\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSummer of 2019, I was in Beijing. My friends and I were in \u003ca href=\"https://en.wikipedia.org/wiki/Wudaokou\"\u003eWudaokou\u003c/a\u003e, and they wanted to bike to the \u003ca href=\"https://en.wikipedia.org/wiki/Beijing_National_Stadium\"\u003eBird\u0026rsquo;s Nest\u003c/a\u003e. To give you an idea of how long that would take, the distance is around 3 miles or 5 km. I was a little scared, but I figured I could learn along the way. My friends had trouble describing how to ride the bike to me, but if I didn\u0026rsquo;t figure it out, I would have been left behind. I kept trying to \u0026ldquo;balance while moving\u0026rdquo; as someone described it, and eventually I got the hang of it. And then I learned what everyone meant when they said you learn it once and never forget it.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s how I learned to ride a bike the summer of 2019 in Beijing.\u003c/p\u003e\n","url":"/2023/05/19/rideabike/","image":"photos/<no value>","banner_image":"photos/<no value>","date_published":"19056-19-09T50:1919:00+00:00","date_modified":"19056-19-09T50:1919:00+00:00","author":{"name":"Ronalds Vilcins","url":"https://ronaldsvilcins.com/"}},{"id":"8ee8d20175b327d58debebb8bc2b138c24873db4","title":"My favorite songs in Mandarin","summary":"A list of my favorite Mandarin songs","content_text":"I\u0026rsquo;m a firm believer that most people\u0026rsquo;s favorite songs were simply there for them at the right place and right time in their lives. I\u0026rsquo;m no different. At this point, I think my list of all-time favorite Mandopop songs is almost set in stone.\nDon\u0026rsquo;t Break my Heart # I like that it\u0026rsquo;s an upbeat rock song. I first heard it in a movie about Beijing while living in Beijing (and Dou Wei is from Beijing). All in all, it reminds me a lot of Beijing.\n童年 # I like singing this at karaoke as an adult because it reminds me of how simple things were when I was a kid, and it\u0026rsquo;s like, there\u0026rsquo;s no reason my life can\u0026rsquo;t be that simple now. That was also back when we had blackboards. Now they\u0026rsquo;re all dry erase.\n爱人错过 # They have the most interesting new music.\n我是不是你最疼爱的人 # I found the emotion in this song easy to understand. Xuan Xuan\u0026rsquo;s cover will always be the best version to me.\n夜空中最亮的心 # You know that one Chinese song that sounds like Coldplay but isn\u0026rsquo;t. I\u0026rsquo;ve replayed it a million times though.\n也罢 # I like how she sings with emotion so effortlessly, and it feels genuine, not overdone.\n静止 # All around extremely underrated.\n思念是一种病 # I first heard Robynn \u0026amp; Kendy\u0026rsquo;s cover of this song on the third season of The Voice of China. When they transitioned to \u0026ldquo;Where is the Love\u0026rdquo; I thought it was one of the best auditions I\u0026rsquo;d ever seen on the show. I love the original too. It\u0026rsquo;s a classic.\n无常 # Fuzao is Faye Wong\u0026rsquo;s best album.\n千里之外 # My dad would play Still Fantasy all the time in the car growing up. It remains my favorite Jay Chou album to this day.\n春天里 # I like all of Wang Feng\u0026rsquo;s popular songs. They sound nice.\n太阳 # No, not that one. Not her other song, or the other one.\n无与伦比的美丽 # 。\n大艺术家 # It\u0026rsquo;s a really good pop song.\n日常 # I like songs about living life. \u0026ldquo;To Hebe\u0026rdquo; is good in that regard too.\n假装我们没爱过 # I feel like this song was lost to time. I also like that one Fahrenheit song with the MV set in the desert (?). That one is more famous.\n牡丹江 # You know when you listen to a song about a place, and even though you\u0026rsquo;ve never been there, you can feel how deeply the person who wrote the song feels about that place.\n","content_html":"\u003cp\u003eI\u0026rsquo;m a firm believer that most people\u0026rsquo;s favorite songs were simply there for them at \u003ca href=\"/2023/05/14/timeplace20230514/\"\u003ethe right place and right time\u003c/a\u003e in their lives. I\u0026rsquo;m no different. At this point, I think my list of all-time favorite Mandopop songs is almost set in stone.\u003c/p\u003e\n\u003ch2 id=\"dont-break-my-heart\"\u003eDon\u0026rsquo;t Break my Heart \u003ca href=\"#dont-break-my-heart\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI like that it\u0026rsquo;s an upbeat rock song. I first heard it in a \u003ca href=\"https://en.wikipedia.org/wiki/Summer_Palace_(2006_film)\"\u003emovie about Beijing\u003c/a\u003e while living in Beijing (and Dou Wei is from Beijing). All in all, it reminds me a lot of Beijing.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/emBNp2TvPR8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"童年\"\u003e童年 \u003ca href=\"#%e7%ab%a5%e5%b9%b4\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI like singing this at karaoke as an adult because it reminds me of how simple things were when I was a kid, and it\u0026rsquo;s like, there\u0026rsquo;s no reason my life can\u0026rsquo;t be that simple now. That was also back when we had blackboards. Now they\u0026rsquo;re all dry erase.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mRKTOZmX2cE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"爱人错过\"\u003e爱人错过 \u003ca href=\"#%e7%88%b1%e4%ba%ba%e9%94%99%e8%bf%87\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThey have the most interesting new music.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6D79CYTxvOM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"我是不是你最疼爱的人\"\u003e我是不是你最疼爱的人 \u003ca href=\"#%e6%88%91%e6%98%af%e4%b8%8d%e6%98%af%e4%bd%a0%e6%9c%80%e7%96%bc%e7%88%b1%e7%9a%84%e4%ba%ba\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI found the emotion in this song easy to understand. Xuan Xuan\u0026rsquo;s cover will always be the best version to me.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/x-pb5MEqFcM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"夜空中最亮的心\"\u003e夜空中最亮的心 \u003ca href=\"#%e5%a4%9c%e7%a9%ba%e4%b8%ad%e6%9c%80%e4%ba%ae%e7%9a%84%e5%bf%83\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eYou know that one Chinese song that sounds like Coldplay but isn\u0026rsquo;t. I\u0026rsquo;ve replayed it a million times though.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GPnymcrXgX0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"也罢\"\u003e也罢 \u003ca href=\"#%e4%b9%9f%e7%bd%a2\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI like how she sings with emotion so effortlessly, and it feels genuine, not overdone.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1oxh4cGQJHQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"静止\"\u003e静止 \u003ca href=\"#%e9%9d%99%e6%ad%a2\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAll around extremely underrated.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/uwL23suAKm0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"思念是一种病\"\u003e思念是一种病 \u003ca href=\"#%e6%80%9d%e5%bf%b5%e6%98%af%e4%b8%80%e7%a7%8d%e7%97%85\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI first heard \u003ca href=\"https://www.youtube.com/watch?v=y3U2y2G316E\"\u003eRobynn \u0026amp; Kendy\u0026rsquo;s cover\u003c/a\u003e of this song on the third season of The Voice of China. When they transitioned to \u0026ldquo;Where is the Love\u0026rdquo; I thought it was one of the best auditions I\u0026rsquo;d ever seen on the show. I love the original too. It\u0026rsquo;s a classic.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9ei1PUmDz98\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"无常\"\u003e无常 \u003ca href=\"#%e6%97%a0%e5%b8%b8\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Fuzao\"\u003eFuzao\u003c/a\u003e is Faye Wong\u0026rsquo;s best album.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Jna0kNZofbQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"千里之外\"\u003e千里之外 \u003ca href=\"#%e5%8d%83%e9%87%8c%e4%b9%8b%e5%a4%96\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eMy dad would play \u003ca href=\"https://en.wikipedia.org/wiki/Still_Fantasy\"\u003eStill Fantasy\u003c/a\u003e all the time in the car growing up. It remains my favorite Jay Chou album to this day.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ocDo3ySyHSI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"春天里\"\u003e春天里 \u003ca href=\"#%e6%98%a5%e5%a4%a9%e9%87%8c\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI like all of Wang Feng\u0026rsquo;s popular songs. They sound nice.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4RgAajuqPug\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"太阳\"\u003e太阳 \u003ca href=\"#%e5%a4%aa%e9%98%b3\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNo, not \u003ca href=\"https://www.youtube.com/watch?v=7vlVjfMl_Nk\"\u003ethat one\u003c/a\u003e. Not \u003ca href=\"https://www.youtube.com/watch?v=tv95k0zqnaA\"\u003eher other song\u003c/a\u003e, or \u003ca href=\"https://www.youtube.com/watch?v=OZXy0t2i21A\"\u003ethe other one\u003c/a\u003e.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRcqZqi56Ws\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"无与伦比的美丽\"\u003e无与伦比的美丽 \u003ca href=\"#%e6%97%a0%e4%b8%8e%e4%bc%a6%e6%af%94%e7%9a%84%e7%be%8e%e4%b8%bd\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e。\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NA4otP-v6iI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"大艺术家\"\u003e大艺术家 \u003ca href=\"#%e5%a4%a7%e8%89%ba%e6%9c%af%e5%ae%b6\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIt\u0026rsquo;s a really good pop song.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bWx-vtCSg0w\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"日常\"\u003e日常 \u003ca href=\"#%e6%97%a5%e5%b8%b8\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI like songs about living life. \u0026ldquo;\u003ca href=\"https://youtu.be/Y-l8vok_tUE\"\u003eTo Hebe\u003c/a\u003e\u0026rdquo; is good in that regard too.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/3dBFK2fHjWg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"假装我们没爱过\"\u003e假装我们没爱过 \u003ca href=\"#%e5%81%87%e8%a3%85%e6%88%91%e4%bb%ac%e6%b2%a1%e7%88%b1%e8%bf%87\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI feel like this song was lost to time. I also like \u003ca href=\"https://youtu.be/6b1cikZ8AvU\"\u003ethat one Fahrenheit song with the MV set in the desert\u003c/a\u003e (?). That one is more famous.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/XAlypUCW1VQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ch2 id=\"牡丹江\"\u003e牡丹江 \u003ca href=\"#%e7%89%a1%e4%b8%b9%e6%b1%9f\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eYou know when you listen to a song about a place, and even though you\u0026rsquo;ve never been there, you can feel how deeply the person who wrote the song feels about that place.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nEKJGhoGH3Y\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e","url":"/2023/05/17/favoritemandopopsongs/","image":"photos/<no value>","banner_image":"photos/<no value>","date_published":"17056-17-09T50:1717:00+00:00","date_modified":"17056-17-09T50:1717:00+00:00","author":{"name":"Ronalds Vilcins","url":"https://ronaldsvilcins.com/"}},{"id":"8dcfa3eecf8a075a63540ef19cc1b36a53dc1814","title":"Documentation as a value add","summary":"Quick thoughts on documentation","content_text":"These are my quick thoughts after writing\u0026hellip; a single page of docs. Grain of salt disclaimer.\nDocumentation as a project # Documentation is a never-ending project. The first questions you should ask with any project are: Do I need to do it? What value does it add? Applied to documentation, you can ask:\nDoes my tool need good documentation? What value does good documentation add to my tool? I don\u0026rsquo;t think the answers to these questions are obvious. There are a lot of tools in our lives we use simply because they\u0026rsquo;re the only option, not because they\u0026rsquo;re easy to use. If you\u0026rsquo;re the only provider of internet payments APIs in the market, maybe you\u0026rsquo;re okay with having subpar documentation, but you can quickly think of a few reasons to improve it:\nA young upstart might come around with better documentation, leading potential customers to choose them over you. You can reduce go-live time for your customers. You can establish trust with your customers and build relationships that compound over time as you develop new products. All this is to say I understand why some companies choose not to invest in improving their documentation, but the investment certainly makes sense for some.\nDocumentation as code # My employer treats documentation with a similar rigor to code:\nDocumentation linting rules catch spelling mistakes, broken links, common language style mistakes (passive voice, confusing words like \u0026ldquo;once\u0026rdquo;), missing glossary definitions (\u0026ldquo;webhook\u0026rdquo;), and more. We think about the information architecture of our docs, like you might think of a system design architecture before writing code. Documentation goes through technical writing review. Documentation as a value add # My employer is the first example people point to as an example of investment in documentation paying dividends over time. Having spent a lot of time reading our docs, there are a few things I can\u0026rsquo;t help but notice when I read the docs for other developer-focused projects.\nSome projects over-invest in feature docs and under-invest in solution docs. They describe what x is but not how to use it. People visit your docs with a goal in mind, and your mission is to help them achieve it. Some people brain dump when they write docs. Every doc needs a thesis statement to orient its direction. Only include details that advance the user towards that goal. Why use many word when few word do trick. Some docs could use editing for brevity. Reading convoluted sentences takes a toil on the tired developer\u0026rsquo;s mind. The easiest example is the words \u0026ldquo;very\u0026rdquo; and \u0026ldquo;really\u0026rdquo; [0]. When documentation is an after-thought, it\u0026rsquo;s apparent in the developer experience. If you don\u0026rsquo;t build your product ground up from the perspective of how a developer would use it, you notice when it\u0026rsquo;s hard to document. After all, documenting is just describing to a developer how they use your product. Recently, I\u0026rsquo;ve seen a lot of AI tools to summarize documentation on Twitter. While those tools are no doubt useful, I think there\u0026rsquo;s potential in tools to help write documentation. I want to see an AI tool that takes a 20-step brain dump guide and converts it to a 5-step MVP tutorial.\nIf you want to make documentation a differentiating point for your product, I think it\u0026rsquo;s first and foremost about the content.\nHow do you know if the content is valuable? Read it.\nAI can help you write and edit, but the ultimate test of your docs is if\nA human understands them. A human can use your product to build something that generates value. That is, until AI can replace my job as a developer (I don\u0026rsquo;t think it\u0026rsquo;s there quite yet).\n[0] I\u0026rsquo;m allowed to use them on my blog, however, because my personal voice can creep in my blog because it\u0026rsquo;s my blog.\n","content_html":"\u003cp\u003eThese are my quick thoughts after writing\u0026hellip; a single page of docs. Grain of salt disclaimer.\u003c/p\u003e\n\u003ch2 id=\"documentation-as-a-project\"\u003eDocumentation as a project \u003ca href=\"#documentation-as-a-project\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eDocumentation is a never-ending project. The first questions you should ask with any project are: Do I need to do it? What value does it add? Applied to documentation, you can ask:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDoes my tool \u003cem\u003eneed\u003c/em\u003e good documentation?\u003c/li\u003e\n\u003cli\u003eWhat value does good documentation add to my tool?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI don\u0026rsquo;t think the answers to these questions are obvious. There are a lot of tools in our lives we use simply because they\u0026rsquo;re the only option, not because they\u0026rsquo;re easy to use. If you\u0026rsquo;re the only provider of internet payments APIs in the market, maybe you\u0026rsquo;re okay with having subpar documentation, but you can quickly think of a few reasons to improve it:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eA young upstart might come around with better documentation, leading potential customers to choose them over you.\u003c/li\u003e\n\u003cli\u003eYou can reduce go-live time for your customers.\u003c/li\u003e\n\u003cli\u003eYou can establish trust with your customers and build relationships that compound over time as you develop new products.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAll this is to say I understand why some companies choose not to invest in improving their documentation, but the investment certainly makes sense for some.\u003c/p\u003e\n\u003ch2 id=\"documentation-as-code\"\u003eDocumentation as code \u003ca href=\"#documentation-as-code\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eMy employer treats documentation with a similar rigor to code:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/jhzc_/status/1658270046202781696\"\u003eDocumentation linting rules\u003c/a\u003e catch spelling mistakes, broken links, common language style mistakes (passive voice, confusing words like \u0026ldquo;once\u0026rdquo;), missing glossary definitions (\u0026ldquo;webhook\u0026rdquo;), and more.\u003c/li\u003e\n\u003cli\u003eWe think about the \u003ca href=\"https://blog.hubspot.com/website/information-architecture\"\u003einformation architecture\u003c/a\u003e of our docs, like you might think of a system design architecture before writing code.\u003c/li\u003e\n\u003cli\u003eDocumentation goes through technical writing review.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"documentation-as-a-value-add\"\u003eDocumentation as a value add \u003ca href=\"#documentation-as-a-value-add\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eMy employer is the first example people point to as an example of investment in documentation paying dividends over time. Having spent a lot of time reading our docs, there are a few things I can\u0026rsquo;t help but notice when I read the docs for other developer-focused projects.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSome projects \u003cstrong\u003eover-invest in feature docs and under-invest in solution docs\u003c/strong\u003e. They describe what x is but not how to use it. People visit your docs with a goal in mind, and your mission is to help them achieve it.\u003c/li\u003e\n\u003cli\u003eSome people \u003cstrong\u003ebrain dump\u003c/strong\u003e when they write docs. Every doc needs a thesis statement to orient its direction. Only include details that advance the user towards that goal.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWhy use many word when few word do trick\u003c/strong\u003e. Some docs could use editing for brevity. Reading convoluted sentences takes a toil on the tired developer\u0026rsquo;s mind. The easiest example is the words \u0026ldquo;very\u0026rdquo; and \u0026ldquo;really\u0026rdquo; [0].\u003c/li\u003e\n\u003cli\u003eWhen \u003cstrong\u003edocumentation is an after-thought\u003c/strong\u003e, it\u0026rsquo;s apparent in the developer experience. If you don\u0026rsquo;t build your product ground up from the perspective of how a developer would use it, you notice when it\u0026rsquo;s hard to document. After all, documenting is just describing to a developer how they use your product.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eRecently, I\u0026rsquo;ve seen a lot of AI tools to summarize documentation on Twitter. While those tools are no doubt useful, I think there\u0026rsquo;s potential in tools to help \u003cem\u003ewrite\u003c/em\u003e documentation. I want to see an AI tool that takes a 20-step brain dump guide and converts it to a 5-step MVP tutorial.\u003c/p\u003e\n\u003cp\u003eIf you want to make documentation a differentiating point for your product, I think it\u0026rsquo;s first and foremost about the content.\u003c/p\u003e\n\u003cp\u003eHow do you know if the content is valuable? Read it.\u003c/p\u003e\n\u003cp\u003eAI can help you write and edit, but the ultimate test of your docs is if\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eA human understands them.\u003c/li\u003e\n\u003cli\u003eA human can use your product to build something that generates value.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThat is, until AI can replace my job as a developer (I don\u0026rsquo;t think it\u0026rsquo;s there quite yet).\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e[0] I\u0026rsquo;m allowed to use them on my blog, however, because my personal voice can creep in my blog because it\u0026rsquo;s my blog.\u003c/p\u003e\n","url":"/2023/05/15/documentationasvalueadd20230515/","image":"photos/<no value>","banner_image":"photos/<no value>","date_published":"15056-15-09T50:1515:00+00:00","date_modified":"15056-15-09T50:1515:00+00:00","author":{"name":"Ronalds Vilcins","url":"https://ronaldsvilcins.com/"}},{"id":"cc77c67caa5111c2a19ff985bf217c944b388fde","title":"Songs that remind you of a time and place","summary":"My thoughts on songs that remind you of a time and place","content_text":"In December 2019, I started compiling monthly playlists. The goal was to create a kind of musical diary, a playlist for a specific time in my life. It\u0026rsquo;s fun to reflect on songs that you listen to, and the memories just all come back to you. This is something I\u0026rsquo;ve noted to myself in my head for a while, although I wish I\u0026rsquo;d started creating playlists earlier.\nJune 2012, sitting in my uncle\u0026rsquo;s car as we drove from Yizhuang to the city center.\nSeptember 2016, on the bus to school, I listened to this album every day for a week straight.\nAugust 2019, in the cab home after a night out in Sanlitun.\nMarch 2020, on the bus to the airport after my college announced classes were suspended:\nDecember 2021, when I graduated college.\nFebruary 2022, when I moved to NYC.\nAugust 2022, driving down the Pacific Coast Highway on the way from Malibu to Santa Monica.\n","content_html":"\u003cp\u003eIn December 2019, I started compiling monthly playlists. The goal was to create a kind of musical diary, a playlist for a specific time in my life. It\u0026rsquo;s fun to reflect on songs that you listen to, and the memories just all come back to you. This is something I\u0026rsquo;ve noted to myself in my head for a while, although I wish I\u0026rsquo;d started creating playlists earlier.\u003c/p\u003e\n\u003cp\u003eJune 2012, sitting in my uncle\u0026rsquo;s car as we drove from Yizhuang to the city center.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YwsjsiJZ1Ro\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003cp\u003eSeptember 2016, on the bus to school, I listened to this album every day for a week straight.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mnywpd8VRVo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/uwyWMhb0nlU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003cp\u003eAugust 2019, in the cab home after a night out in Sanlitun.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/eSf9G5x7rMI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003cp\u003eMarch 2020, on the bus to the airport after my college announced classes were suspended:\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UAsTlnjvetI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kTHhOQJRHNU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003cp\u003eDecember 2021, when I graduated college.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Kwalypwvd8I\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003cp\u003eFebruary 2022, when I moved to NYC.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/DoJHmQsu9x8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/BiiwclhI5Y8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003cp\u003eAugust 2022, driving down the Pacific Coast Highway on the way from Malibu to Santa Monica.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HYrxGEt9czo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e","url":"/2023/05/14/timeplace/","image":"photos/<no value>","banner_image":"photos/<no value>","date_published":"14056-14-09T50:1414:00+00:00","date_modified":"14056-14-09T50:1414:00+00:00","author":{"name":"Ronalds Vilcins","url":"https://ronaldsvilcins.com/"}},{"id":"54ba8c5dda61a9b37e78d489138329ce53e1d152","title":"Every match I watched in person at the US Open","summary":"2021-2022","content_text":"2021 # Fall break in NYC! Went back to Ithaca, then drove back down again for the final.\nCarlos Alcaraz vs Stefanos Tsitsipas | 2021 US Open Round 3 Leylah Fernandez vs Naomi Osaka | 2021 US Open Round 3 Mixed Doubles Final | Krawczyk/Salisbury vs Olmos/Arevalo | 2021 US Open Emma Raducanu vs Leylah Fernandez Highlights | 2021 US Open Final 2022 # No more driving 5 hours upstate!\nHradecka/Noskova vs. Williams/Williams | 2022 US Open Round 1 Fabio Fognini vs. Rafael Nadal | 2022 US Open Round 2 Petra Kvitova vs. Jessica Pegula | 2022 US Open Round 4 Frances Tiafoe vs. Rafael Nadal | 2022 US Open Round 4 Iga Swiatek vs. Jule Niemeier | 2022 US Open Round 4 Victoria Azarenka vs. Karolina Pliskova | 2022 US Open Round 4 ","content_html":"\u003ch3 id=\"2021\"\u003e2021 \u003ca href=\"#2021\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eFall break in NYC! Went back to Ithaca, then drove back down again for the final.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=1eo0_wKg1Wg\"\u003eCarlos Alcaraz vs Stefanos Tsitsipas | 2021 US Open Round 3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=apUw33XYUPM\"\u003eLeylah Fernandez vs Naomi Osaka | 2021 US Open Round 3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=XWifULrlOMI\"\u003eMixed Doubles Final | Krawczyk/Salisbury vs Olmos/Arevalo | 2021 US Open\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=hRydTS4kCaE\"\u003eEmma Raducanu vs Leylah Fernandez Highlights | 2021 US Open Final\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2022\"\u003e2022 \u003ca href=\"#2022\" class=\"hash g\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNo more driving 5 hours upstate!\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=xHTSnwnuqZc\"\u003eHradecka/Noskova vs. Williams/Williams | 2022 US Open Round 1\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=6bSgWQr0PbE\"\u003eFabio Fognini vs. Rafael Nadal | 2022 US Open Round 2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=cQLVPsIOzUA\"\u003ePetra Kvitova vs. Jessica Pegula | 2022 US Open Round 4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=DHYjbeffHDo\"\u003eFrances Tiafoe vs. Rafael Nadal | 2022 US Open Round 4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=w4Y1pDBtmQE\"\u003eIga Swiatek vs. Jule Niemeier | 2022 US Open Round 4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=SQqISNJnVpg\"\u003eVictoria Azarenka vs. Karolina Pliskova | 2022 US Open Round 4\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","url":"/2022/09/13/usopen/","image":"photos/<no value>","banner_image":"photos/<no value>","date_published":"13096-13-09T90:1313:00+00:00","date_modified":"13096-13-09T90:1313:00+00:00","author":{"name":"Ronalds Vilcins","url":"https://ronaldsvilcins.com/"}}]}