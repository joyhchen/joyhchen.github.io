<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>engineering on Joy Chen</title><link>/tags/engineering/</link><description>Recent content in engineering on Joy Chen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 03 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/engineering/atom.xml" rel="self" type="application/rss+xml"/><item><title>AI automates the boring code</title><link>/2023/06/03/aiautomatestheboringcode/</link><pubDate>Sat, 03 Jun 2023 00:00:00 +0000</pubDate><guid>/2023/06/03/aiautomatestheboringcode/</guid><description>Recently, I was thinking about how people learn how to code. Automate the Boring Stuff with Python is a book frequently recommended to people learning Python. It teaches you the basics of the language and how to do practical tasks. One of the first practical uses I had for writing Python scripts was scraping the used phone marketplace Swappa and emailing myself whenever a new listing was posted.
Here are two true statements about that task.</description></item><item><title>Documentation as a value add</title><link>/2023/05/15/documentationasvalueadd20230515/</link><pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate><guid>/2023/05/15/documentationasvalueadd20230515/</guid><description>These are my quick thoughts after writing&amp;hellip; a single page of docs. Grain of salt disclaimer.
Documentation as a project # Documentation is a never-ending project. The first questions you should ask with any project are: Do I need to do it? What value does it add? Applied to documentation, you can ask:
Does my tool need good documentation? What value does good documentation add to my tool? I don&amp;rsquo;t think the answers to these questions are obvious.</description></item></channel></rss>